//java大全网站:https://www.runoob.com/java/java-tutorial.html
将数组转化成List集合的方法:List list = Arrays.asList(“a”,“b”,“c”);
将List集合转化成数组的方法:集合.toArray(new 数组)
//---------------------------
对于数组的比较必须使用: Arrays.equals(数组1,数组2)
对于集合的比较必须使用: 集合1.equals(集合2)
//---------------------------
对于hashmap的初始化:HashMap<Integer,Character>map=new HashMap<Integer,Character>();泛型的类型可以是任意包装类,但是顺序是key,vaule
map.containsValue(value值),map.containsKey(key值)是否包含,返回布尔型
map.put(key,value),添加键值对
map.get(key)返回key对应的value值
map.remove(index),将所有key=index的键值对给移除了,不能移除一个
//---------------------------
如果Arraylist要删除多个值相同元素中的一个:int index=Arraylistxx.lastIndexOf(s.charAt(i));Arraylistxx.remove(index);
复制集合arraylist1.addAll(arraylist2),将arraylist2的元素全部添加到arraylist1后面,如果arraylist1为空就相当于复制arraylist2给arraylist1
//---------------------------
https://blog.csdn.net/weixin_47872288/article/details/116721995
对于排序的用法:
(1) Arrays.sort(a);//默认排序是从小到大
(2) Integer[] integers=new Integer[]{2,324,4,4,6,1};//必须是包装类类型,否则无法实现
    Arrays.sort(integers, Collections.reverseOrder());//实现从大到小排序
(3) 一维数组的排序
    Integer[] integers=new Integer[]{2,324,4,4,6,1};//必须是包装类类型,否则无法实现
    Arrays.sort(integers, new Comparator<Integer>()//重写Comparator的构造函数和compare方法
    {
        public int compare(Integer o1, Integer o2)
         {return o1 - o2;//从小到大牌序(o2 - o1是从大到小排序)}
    }
    );
(4) 二维数组排序
    int [][] intervals=new int[][]{{1,3},{2,6},{8,10},{15,18}};//interval是一个二维数组,4行2列
    Arrays.sort(intervals, new Comparator<int[]>()//重写Comparator的构造函数和compare方法
    {
        public int compare(int[] interval1, int[] interval2)
        {return interval1[0] - interval2[0];}//按照二维数组每一行的第一个元素从小到大排序
    }
    );
//---------------------------
复制固定位数字符串的的方法:
System.arraycopy()的四个参数
src:源数组;
srcPos:源数组要复制的起始位置;
dest:目的数组;
destPos:目的数组放置的起始位置;
length:复制的长度.
//--------------------------
T46前序,中序，后序遍历的if里面的内容顺序是固定的
先:if(root.left!=null)
  {
      findall(root.left);
  }
后:if(root.right!=null)
  {
      findall(root.right);
  }
//--------------------------
T44对节点的val进行大小排序
对集合中的节点按照val的大小排序
Collections.sort(list, new Comparator<TreeNode>() {
    public int compare( TreeNode node1, TreeNode node2) {
        // 根据节点的val值进行比较
        return Integer.compare(node1.val, node2.val);
    }
});
//-------------------------
T40深度优先遍历:
void dfs(TreeNode root) {
    if (root == null) {
        return;
    }
    dfs(root.left);
    dfs(root.right);
}
T41广度优先遍历:
void bfs(TreeNode root) {
    Queue<TreeNode> queue = new ArrayDeque<>();
    queue.add(root);
    while (!queue.isEmpty()) {
        TreeNode node = queue.poll(); // Java 的 pop 写作 poll()
        if (node.left != null) {
            queue.add(node.left);
        }
        if (node.right != null) {
            queue.add(node.right);
        }
    }
}
